<!DOCTYPE html>
<html>

<head>

    <!-- Basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>
        Arrow Achievers
    </title>


    <%- include('../includes/head.ejs') %>
        <style>
            form label {
                font-weight: 700 !important;
                color: black !important;
            }
            
            sup {
                font-weight: bolder !important;
            }
            
            span.multiselect-native-select {
                position: relative
            }
            
            #dates-field2+.show {
                position: relative;
            }
            
            .multiselect-container.dropdown-menu.show {
                transform: inherit !important;
                width: 100%;
                top: 38px !important;
            }
            
            span.multiselect-native-select select {
                border: 0!important;
                clip: rect(0 0 0 0)!important;
                height: 1px!important;
                margin: -1px -1px -1px -3px!important;
                overflow: hidden!important;
                padding: 0!important;
                position: absolute!important;
                width: 1px!important;
                left: 50%;
                top: 30px
            }
            
            .multiselect-container {
                position: absolute;
                list-style-type: none;
                margin: 0;
                padding: 0
            }
            
            .multiselect-container .input-group {
                margin: 5px
            }
            
            .multiselect-container>li {
                padding: 0
            }
            
            .multiselect-container>li>a.multiselect-all label {
                font-weight: 700
            }
            
            .multiselect-container>li.multiselect-group label {
                margin: 0;
                padding: 3px 20px 3px 20px;
                height: 100%;
                font-weight: 700
            }
            
            .multiselect-container>li.multiselect-group-clickable label {
                cursor: pointer
            }
            
            .multiselect-container>li>a {
                padding: 0
            }
            
            .multiselect-container>li>a>label {
                margin: 0;
                height: 100%;
                cursor: pointer;
                font-weight: 400;
                padding: 3px 0 3px 30px
            }
            
            .multiselect-container>li>a>label.radio,
            .multiselect-container>li>a>label.checkbox {
                margin: 0
            }
            
            .multiselect-container>li>a>label>input[type=checkbox] {
                margin-bottom: 5px
            }
            
            .btn-group>.btn-group:nth-child(2)>.multiselect.btn {
                border-top-left-radius: 4px;
                border-bottom-left-radius: 4px
            }
            
            .form-inline .multiselect-container label.checkbox,
            .form-inline .multiselect-container label.radio {
                padding: 3px 20px 3px 40px
            }
            
            .form-inline .multiselect-container li a label.checkbox input[type=checkbox],
            .form-inline .multiselect-container li a label.radio input[type=radio] {
                margin-left: -20px;
                margin-right: 0
            }
        </style>
</head>

<body>
    <div class="loading-overlay">
        <div class="bounce-loader">
            <div class="bounce1"></div>
            <div class="bounce2"></div>
            <div class="bounce3"></div>
        </div>
    </div>

    <div class="body">
        <%- include('../includes/header.ejs') %>
            <div class="divider130"></div>
            <div role="main" class="main">
                <section class="page-header page-header-classic page-header-sm">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-8 order-2 order-md-1 align-self-center p-static">
                                <span class="page-header-title-border visible" style="width: 43.25px;"></span>
                                <h1 data-title-border="">Registration Form</h1>
                            </div>
                            <!-- <div class="col-md-4 order-1 order-md-2 align-self-center">
								<ul class="breadcrumb d-block text-md-right">
									<li><a href="#">Home</a></li>
									<li class="active">Pages</li>
								</ul>
							</div> -->
                        </div>
                    </div>
                </section>

                <div class="container mb20">
                    <h1 class="text-center font-weight-bold appear-animation" data-appear-animation="fadeInUpShorter">Registration</h1>
                    <div class="row appear-animation" data-appear-animation="fadeInUpShorter">
                        <div class="col-md-8" style="max-width: 800px;  margin: 0 auto;">
                            <div style="color: red;">
                                <h2 class="errorMessage">
                                    <%= error_msg %>
                                </h2>
                            </div>
                            <form class="registration" id="form11" action="/registration-form" method="POST" enctype="multipart/form-data">
                                <div class="mb20">
                                    <label for="email">Email<sup style="color: red; text-decoration: bold;">*</sup></label>
                                    <input class="form-control" id="email" name="email" required type="text" placeholder="Enter email" value="<%= (user_err.length > 0)?user_err[0].email:'' %>">
                                </div>
                                <div class="mb20">
                                    <label for="departments">Select Course<sup style="color: red; text-decoration: bold;">*</sup></label>
                                    <select name="courses" required id="dates-field2" class="multiselect-ui form-control" multiple="multiple">
                                            <% for(let i=0;i<courses.length;i++) {%>
											<option value="<%=courses[i].courseName %>" id="<%= courses[i].courseName.replace(' ','') %>" <%=( user_err.length>0)?((user_err[0].courses1.includes(courses[i].courseName))?'selected':''):''%> ><%=courses[i].courseName %></option>
											<% } %>
                                        </select>
                                </div>

                                <div class="mb20">
                                    <label for="name">Student Name<sup style="color: red; text-decoration: bold;">*</sup></label>
                                    <input class="form-control" id="name" name="name" type="text" value="<%= (user_err.length > 0)?user_err[0].name:'' %>" placeholder="Student Name" required>
                                </div>
                                <div class="mb20">
                                    <label for="fatherName">Father Name<sup style="color: red; text-decoration: bold;">*</sup></label>
                                    <input class="form-control" id="fatherName" name="fatherName" required type="text" placeholder="Father Name" value="<%= (user_err.length > 0)?user_err[0].fatherName:'' %>">
                                </div>
                                <div class="mb20">
                                    <label for="fatherOccupation">Father Occupation<sup style="color: red; text-decoration: bold;">*</sup></label>
                                    <input type="text" placeholder="Occupation" value="<%= (user_err.length > 0)?user_err[0].fatherOccupation:'' %>" class="form-control" name="fatherOccupation" id="fatherOccupation" required>
                                </div>
                                <div class="mb-20">
                                    <label for="contact">Contact Number<sup style="color: red; text-decoration: bold;">*</sup></label>
                                    <input type="tel" maxlength="10" minlength="10" name="contact" required value="<%= (user_err.length > 0)?user_err[0].contact:'' %>" id="contactn" placeholder="Contact Number" class="form-control">
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-6">
                                        <label for="contact">Whatsapp Number</label>
                                        <input type="tel" maxlength="10" minlength="10" name="whatsapp" value="<%= (user_err.length > 0)?user_err[0].whatsapp:'' %>" id="whatsappn" placeholder="Whatsapp Number" class="form-control">
                                    </div>

                                    <div class="col-md-6">
                                        <label for="category">Category<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <select name="category" id="category" class="form-control" required>
                                        <option value="NONE" <%=( user_err.length>0)?((user_err[0].category === 'NONE')?'selected':''):''%>>Select Category</option>
                                        <option value="GEN" <%=( user_err.length>0)?((user_err[0].category === 'GEN')?'selected':''):''%> >GENERAL</option>
                                        <option value="OBC" <%=( user_err.length>0)?((user_err[0].category === 'OBC')?'selected':''):''%> >OBC</option>
                                        <option value="ST" <%=( user_err.length>0)?((user_err[0].category === 'ST')?'selected':''):''%> >ST</option>
                                        <option value="SC" <%=( user_err.length>0)?((user_err[0].category === 'SC')?'selected':''):''%> >SC</option>
                                    </select>
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-4">
                                        <label for="dob">Date Of Birth<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <input type="date" name="dob" value="<%= (user_err.length > 0)?user_err[0].dob:'' %>" required placeholder="Date of Birth" id="dob" class="form-control">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="bloodGroup">Blood Group</label>
                                        <select name="bloodGroup" id="bloodGroup" class="form-control">
                                        <option value="NONE" id="NONE" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'NONE')?'selected':''):''%> >Select Blood Group</option>
                                        <option value="A+" id="A+" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'A+')?'selected':''):''%> >A+</option>
                                        <option value="B+" id="B+" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'B+')?'selected':''):''%> >B+</option>
                                        <option value="AB+" id="AB+" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'AB+')?'selected':''):''%> >AB+</option>
                                        <option value="O+" id="O+" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'O+')?'selected':''):''%> >O+</option>
                                        <option value="A-" id="A-" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'A-')?'selected':''):''%> >A-</option>
                                        <option value="B-" id="B-" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'B-')?'selected':''):''%> >B-</option>
                                        <option value="AB-" id="AB-" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'AB-')?'selected':''):''%> >AB-</option>
                                        <option value="O-" id="O-" <%=( user_err.length>0)?((user_err[0].bloodGroup === 'O-')?'selected':''):''%> >O-</option>
                                    </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="maritalStatus">Marital Status<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <select name="maritalStatus" id="maritalStatus" class="form-control" required>
                                        <option value="NONE" <%=( user_err.length>0)?((user_err[0].maritalStatus === 'NONE')?'selected':''):''%> >Select Marital Status</option>
                                        <option value="UNMARRIED" <%=( user_err.length>0)?((user_err[0].maritalStatus === 'UNMARRIED')?'selected':''):''%> >Unmarried</option>
                                        <option value="MARRIED" <%=( user_err.length>0)?((user_err[0].maritalStatus === 'MARRIED')?'selected':''):''%> >Married</option>
                                        <option value="OTHER" <%=( user_err.length>0)?((user_err[0].maritalStatus === 'OTHER')?'selected':''):''%> >Other</option>
                                    </select>
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-6">
                                        <label for="height">Height(in cm)<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <input type="number" name="height" placeholder="Height in cm" id="height" value="<%= (user_err.length > 0)?user_err[0].height:'' %>" required class="form-control">
                                    </div>
                                    <div class="col-md-6">
                                        <label for="height">Weight(in kg)<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <input type="number" name="weight" placeholder="Weight in kg" id="weight" value="<%= (user_err.length > 0)?user_err[0].weight:'' %>" required class="form-control">
                                    </div>
                                </div>

                                <div class="row mb20">
                                    <div class="col-md-6">
                                        <label for="address">Address<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <input type="text" name="address" value="<%= (user_err.length > 0)?user_err[0].address:'' %>" required id="address" placeholder="Address" class="form-control">
                                    </div>
                                    <div class="col-md-6">
                                        <label for="state">State<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <select name="state" id="state" class="form-control" required>
                                        <option value="NONE" id="NONE" <%=( user_err.length>0)?((user_err[0].state === 'NONE')?'selected':''):''%> >Select State</option>
                                        <option value="ANDHRA PRADESH" id="ANDHRAPRADESH" <%=( user_err.length>0)?((user_err[0].state === 'ANDHRA PRADESH')?'selected':''):''%> >Andhra Pradesh</option>
                                        <option value="ARUNACHAL PRADESH" id="ARUNACHALPRADESH" <%=( user_err.length>0)?((user_err[0].state === 'ARUNACHAR PRADESH')?'selected':''):''%> >Arunachal Pradesh</option>
                                        <option value="ASSAM" id="ASSAM" <%=( user_err.length>0)?((user_err[0].state === 'ASSAM')?'selected':''):''%> >Assam</option>
                                        <option value="BIHAR" id="BIHAR" <%=( user_err.length>0)?((user_err[0].state === 'BIHAR')?'selected':''):''%> >Bihar</option>
                                        <option value="CHHATTISGARH" id="CHHATTISGARH" <%=( user_err.length>0)?((user_err[0].state === 'CHATTISGARH')?'selected':''):''%> >Chhattisgarh</option>
                                        <option value="GOA" id="GOA" <%=( user_err.length>0)?((user_err[0].state === 'GOA')?'selected':''):''%> >Goa</option>
                                        <option value="GUJARAT" id="GUJRAT" <%=( user_err.length>0)?((user_err[0].state === 'GUJARAT')?'selected':''):''%> >Gujarat</option>
                                        <option value="HARAYANA" id="HARAYANA" <%=( user_err.length>0)?((user_err[0].state === 'HARAYANA')?'selected':''):''%> >Haryana</option>
                                        <option value="HIMACHAL PRADESH" id="HIMACHALPRADESH" <%=( user_err.length>0)?((user_err[0].state === 'HIMACHAL PRADESH')?'selected':''):''%> >Himachal Pradesh</option>
                                        <option value="JAMMU AND KASHMIR" id="JAMMUANDKASHMIR" <%=( user_err.length>0)?((user_err[0].state === 'JAMMU AND KASHMIR')?'selected':''):''%> >Jammu and Kashmir</option>
                                        <option value="JHARKHAND" id="JHARKHAND" <%=( user_err.length>0)?((user_err[0].state === 'JHARKHAND')?'selected':''):''%> >Jharkhand</option>
                                        <option value="KARNATAKA" id="KARNATAKA" <%=( user_err.length>0)?((user_err[0].state === 'KARNATAKA')?'selected':''):''%> >Karnataka</option>
                                        <option value="KERALA" id="KERELA"<%=( user_err.length>0)?((user_err[0].state === 'KERELA')?'selected':''):''%> > Kerala</option>
                                        <option value="MADHYA PRADESH" id="MADHYAPRADESH" <%=( user_err.length>0)?((user_err[0].state === 'MADHYA PRADESH')?'selected':''):''%> >Madhya Pradesh</option>
                                        <option value="MAHARASHTRA" id="MAHARASHTRA" <%=( user_err.length>0)?((user_err[0].state === 'MAHARASHTRA')?'selected':''):''%> >Maharashtra</option>
                                        <option value="MANIPUR" id="MANIPUR" <%=( user_err.length>0)?((user_err[0].state === 'MANIPUR')?'selected':''):''%> >Manipur</option>
                                        <option value="MEGHALAYA" id="MEGHALAYA" <%=( user_err.length>0)?((user_err[0].state === 'MEGHALAYA')?'selected':''):''%> >Meghalaya </option>
                                        <option value="MIZORAM" id="MIZORAM" <%=( user_err.length>0)?((user_err[0].state === 'MIZORAM')?'selected':''):''%> >Mizoram </option>
                                        <option value="NAGALAND" id="NAGALAND" <%=( user_err.length>0)?((user_err[0].state === 'NAGALAND')?'selected':''):''%> >Nagaland</option>
                                        <option value="ODISHA" id="ODISHA" <%=( user_err.length>0)?((user_err[0].state === 'ODISHA')?'selected':''):''%> >Odisha</option>
                                        <option value="PUNJAB" id="PUNJAB" <%=( user_err.length>0)?((user_err[0].state === 'PUNJAB')?'selected':''):''%> >Punjab</option>
                                        <option value="RAJASTHAN" id="RAJASTHAN" <%=( user_err.length>0)?((user_err[0].state === 'RAJASTHAN')?'selected':''):''%> >Rajasthan</option>
                                        <option value="SIKKIM" id="SIKKIM" <%=( user_err.length>0)?((user_err[0].state === 'SIKKIM')?'selected':''):''%> >Sikkim</option>
                                        <option value="TAMIL NADU" id="TAMILNADU" <%=( user_err.length>0)?((user_err[0].state === 'TAMIL NADU')?'selected':''):''%> >Tamil Nadu</option>
                                        <option value="TELANGANA" id="TELANGANA" <%=( user_err.length>0)?((user_err[0].state === 'TELANGANA')?'selected':''):''%> >Telangana</option>
                                        <option value="TRIPURA" id="TRIPURA" <%=( user_err.length>0)?((user_err[0].state === 'TRIPURA')?'selected':''):''%> >Tripura</option>
                                        <option value="UTTAR PRADESH" id="UTTARPRADESH" <%=( user_err.length>0)?((user_err[0].state === 'UTTAR PRADESH')?'selected':''):''%>>Uttar Pradesh</option>
                                        <option value="UTTARAKHAND" id="UTTARAKHAND" <%=( user_err.length>0)?((user_err[0].state === 'UTTARAKHAND')?'selected':''):''%> >Uttarakhand</option>
                                        <option value="WEST BENGAL" id="WESTBENGAL" <%=( user_err.length>0)?((user_err[0].state === 'WEST BENGAL')?'selected':''):''%> >West Bengal</option>
                                    </select>
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-6">
                                        <label for="district">District<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <input type="text" name="district" value="<%= (user_err.length > 0)?user_err[0].district:'' %>" id="district" class="form-control" required placeholder="District">
                                    </div>
                                    <div class="col-md-6">
                                        <label for="pincode">Pincode<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <input type="number" name="pincode" min="100000" max="999999" value="<%= (user_err.length > 0)?user_err[0].pincode:'' %>" id="pincode" placeholder="Pincode" required class="form-control">
                                    </div>
                                </div>

                                <div class="row mb20">
                                    <div class="col-md-6">
                                        <label for="idType">ID Proof<sup style="color: red; text-decoration: bold;">*</sup></label>
                                        <select name="idType" id="idType" class="form-control" required>
                                        <option value="NONE" <%=( user_err.length>0)?((user_err[0].idType === 'NONE')?'selected':''):''%> >Select Id Proof</option>
                                        <option value="AADHAR CARD" <%=( user_err.length>0)?((user_err[0].idType === 'AADHAR CARD')?'selected':''):''%> >AADHAR CARD</option>
                                        <option value="PAN CARD" <%=( user_err.length>0)?((user_err[0].idType === 'PAN CARD')?'selected':''):''%> >PAN CARD</option>
                                        <option value="VOTER ID" <%=( user_err.length>0)?((user_err[0].idType === 'VOTER ID')?'selected':''):''%> >VOTER ID</option>
                                    </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="document_idcard">&nbsp;</label>
                                        <input type="file" class="" name="document_idcard" required id="document_idcard" />
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-12">
                                        <h2 class="education">Education</h2>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="tenth_university">10<sup>th</sup> Board
								</label>

                                        <select class="form-control" id="tenth_university" name="tenthBoard">
										<option value="NONE" id="NONE10" <%=( user_err.length>0)?((user_err[0].tenthBoard === 'NONE')?'selected':''):''%>>Select Board</option>
										<option value="CBSE" id="CBSE10" <%=( user_err.length>0)?((user_err[0].tenthBoard === 'CBSE')?'selected':''):''%> >CBSE</option>
										<option value="ICSE" id="ICSE10" <%=( user_err.length>0)?((user_err[0].tenthBoard === 'ICSE')?'selected':''):''%> >ICSE</option>
										<option value="UP BOARD" id="UPBOARD10" <%=( user_err.length>0)?((user_err[0].tenthBoard === 'UP BOARD')?'selected':''):''%> >UP BOARD</option>
										<option value="OTHER" id="OTHER10" <%=( user_err.length>0)?((user_err[0].tenthBoard === 'OTHER')?'selected':''):''%> >OTHER</option>
									</select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="tenthYear"> Year</label>
                                        <input class="form-control" id="tenthYear" placeholder="Year" name="tenthYear" type="number" min="1000" max="9999" value="<%= (user_err.length > 0)?user_err[0].tenthYear:'' %>">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="tenth_subject">Subject</label>
                                        <input class="form-control" id="tenth_subject" placeholder="Subjects" name="tenthSubject" type="text" value="<%= (user_err.length > 0)?user_err[0].tenthSubject:'' %>">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="tenth_percentage"> Percentage</label>
                                        <input class="form-control" id="tenth_percentage" placeholder="Percentage" name="tenthPercentage" type="number" value="<%= (user_err.length > 0)?user_err[0].tenthPercentage:'' %>">
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-3">
                                        <label for="tenth_university1">12<sup>th</sup> Board</label>
                                        <select class="form-control" id="tenth_university1" name="twelveBoard">
                                        <option value="NONE" id="NONE12" <%=( user_err.length>0)?((user_err[0].twelveBoard === 'NONE')?'selected':''):''%> >Select Board</option>
                                        <option value="CBSE" id="CBSE12" <%=( user_err.length>0)?((user_err[0].twelveBoard === 'CBSE')?'selected':''):''%> >CBSE</option>
                                        <option value="ISC" id="ICSE12" <%=( user_err.length>0)?((user_err[0].twelveBoard === 'ICSE')?'selected':''):''%> >ISC</option>
                                        <option value="UP BOARD" id="UPBOARD12" <%=( user_err.length>0)?((user_err[0].twelveBoard === 'UP BOARD')?'selected':''):''%> >UP BOARD</option>
                                        <option value="OTHER" id="OTHER12" <%=( user_err.length>0)?((user_err[0].twelveBoard === 'OTHER')?'selected':''):''%> >OTHER</option>
                                    </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="twelve_year">Year</label>
                                        <input class="form-control" id="twelve_year" placeholder="Year" name="twelveYear" type="number" min="1000" max="9999" value="<%= (user_err.length > 0)?user_err[0].twelveYear:'' %>">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="twelve_subject"> Subject</label>
                                        <input class="form-control" id="twelve_year" placeholder="Subject" name="twelveSubject" type="name" value="<%= (user_err.length > 0)?user_err[0].twelveSubject:'' %>">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="twelve_percentage">Percentage</label>
                                        <input class="form-control" id="twelve_percentage" name="twelvePercentage" placeholder="Percentage" type="number" value="<%= (user_err.length > 0)?user_err[0].twelvePercentage:'' %>">
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-4">
                                        <label for="aspiring_university">10 + 2 Aspiring </label>
                                        <select class="form-control" id="tenth_university" name="aspiringBoard">
                                            <option value="NONE" <%=( user_err.length>0)?((user_err[0].aspiringBoard === 'NONE')?'selected':''):''%> >Select Board</option>
                                            <option value="CBSE" id="CBSE" <%=( user_err.length>0)?((user_err[0].aspiringBoard === 'CBSE')?'selected':''):''%> >CBSE</option>
                                            <option value="ICSE" id="ICSE" <%=( user_err.length>0)?((user_err[0].aspiringBoard === 'ICSE')?'selected':''):''%> >ICSE</option>
                                            <option value="UP BOARD" id="UP BOARD" <%=( user_err.length>0)?((user_err[0].aspiringBoard === 'UP BOARD')?'selected':''):''%> >UP BOARD</option>
                                            <option value="OTHER" id="OTHER" <%=( user_err.length>0)?((user_err[0].aspiringBoard === 'OTHER')?'selected':''):''%> >OTHER</option>
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="aspiring_year">Year</label>
                                        <input class="form-control" id="aspiring_year" placeholder="Year" name="aspiringYear" type="number" min="1000" max="9999" value="<%= (user_err.length > 0)?user_err[0].aspiringYear:'' %>">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="aspiring_subject">Subject</label>
                                        <input class="form-control" id="aspiring_subject" placeholder="Subject" type="text" name="aspiringSubject" value="<%= (user_err.length > 0)?user_err[0].aspiringSubject:'' %>">
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-3">
                                        <label for="graduation_university">Graduation</label>
                                        <input class="form-control" id="graduation_university" placeholder="University" name="graduationUniversity" type="text" value="<%= (user_err.length > 0)?user_err[0].graduationUniversity:'' %>">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="graduation_year">Year</label>
                                        <input class="form-control" id="graduation_year" placeholder="Year" name="graduationYear" type="number" min="1000" max="9999" value="<%= (user_err.length > 0)?user_err[0].graduationYear:'' %>">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="graduation_subject">Subject</label>
                                        <input class="form-control" id="graduation_subject" name="graduationSubject" placeholder="Subject" type="text" value="<%= (user_err.length > 0)?user_err[0].graduationSubject:'' %>">
                                    </div>
                                    <div class="col-md-3">
                                        <label for="graduation_percentage">Percentage</label>
                                        <input class="form-control" id="graduation_percentage" name="graduationPercentage" placeholder="Grafuation Percentage" type="number" value="<%= (user_err.length > 0)?user_err[0].graduationPercentage:'' %>">
                                    </div>
                                </div>

                                <div class="row mb20">
                                    <div class="col-md-6">
                                        <label for="tenth_marksheet">10<sup>th</sup> Marksheet</label>
                                        <input type="file" id="tenth_marksheet" name="tenth_marksheet" />
                                    </div>

                                    <div class="col-md-6">
                                        <label id="twelve_marksheet">12<sup>th</sup> Marksheet</label>
                                        <input type="file" id="twelve_marksheet" name="twelve_marksheet" />
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-6">
                                        <label for="aspiring">10 + 2 Aspiring Document</label>
                                        <input type="file" name="aspiring" id="aspiring">
                                    </div>
                                    <div class="col-md-6">
                                        <label id="graduation_document">University Document</label>
                                        <input type="file" id="graduation_document" name="graduation_document" />
                                    </div>
                                </div>
                                <div class="row mb20">
                                    <div class="col-md-6">
                                        <label id="photo">Student Photo</label>
                                        <input type="file" id="photo" name="photo" />
                                    </div>
                                    <!--<div class="col-md-6">
                                    <label for="paid">Paid</label>
                                    <select class="form-control" name="paid" id="paid">
                                        <option value="Paid">Paid</option>
                                        <option value="Unpaid" selected>Unpaid</option>
                                    </select>
                                </div>-->
                                </div>
                                <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                                <div class="text-right borderTop">
                                    <button class="btn btn-primary">Submit</button>
                                </div>
                        </div>
                    </div>

                </div>
            </div>

    </div>
    <%- include('../includes/footer_bottom.ejs') %>
        </div>

        <!-- Vendor -->
        <%- include('../includes/scripts.ejs') %>
            <script>
                $(document).ready(function() {
                    $('#navCourses').addClass(' active');
                });
            </script>
            <script>
                document.getElementById('email').addEventListener('keyup', () => {
                    setTimeout(() => {
                        const email = document.getElementById('email').value;
                        if (email.includes('@')) {
                            fetch('/survey/find/' + email)
                                .then(data => {
                                    return data.json()
                                }).then(jsonData => {
                                    if (jsonData.user) {
                                        document.getElementById('graduation_university').value = jsonData.user.graduationUniversity;
                                        document.getElementById('name').value = jsonData.user.name;
                                        document.getElementById('fatherName').value = jsonData.user.fatherName;
                                        document.getElementById('dob').value = jsonData.user.dob.toString().substring(0, 10);
                                        document.getElementById('address').value = jsonData.user.address;
                                        document.getElementById('district').value = jsonData.user.district;
                                        document.getElementById('contactn').value = jsonData.user.contact.toString();
                                        document.getElementById('height').value = jsonData.user.height;
                                        document.getElementById('weight').value = jsonData.user.weight;
                                        document.getElementById('pincode').value = jsonData.user.pincode;
                                        document.getElementById('graduation_university').value = jsonData.user.graduationUniversity;
                                        document.getElementById('graduation_year').value = jsonData.user.graduationYear;
                                        document.getElementById('tenthYear').value = jsonData.user.year10;
                                        document.getElementById('twelve_year').value = jsonData.user.year12;
                                        document.getElementById(jsonData.user.board10.replace(' ', '') + '10').selected = true;
                                        document.getElementById(jsonData.user.board12.replace(' ', '') + '12').selected = true;
                                        document.getElementById(jsonData.user.bloodGroup).selected = true;
                                        document.getElementById(jsonData.user.state.replace(' ', '')).selected = true;
                                        jsonData.user.courses.forEach(e => {
                                            document.getElementById(e.replace(' ', '')).selected = true;
                                        });
                                    }
                                })
                        }
                    }, 1000);
                })
            </script>
            <script>
                function checker() {
                    const email = document.getElementById('email').value;
                    const contact = document.getElementById('contactn').value;
                    if (!(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email))) {
                        alert('Invalid Email');
                        return false;
                    }
                    if (!(/^[0-9]+$/.test(contact))) {
                        alert('Invaid Contact Number');
                        return false;
                    }
                    if (!document.getElementById('name').value) {
                        alert('Name is required');
                        return false;
                    }
                    if (!document.getElementById('fatherName').value) {
                        alert('Father Name is required');
                        return false;
                    }
                    if (!document.getElementById('fatherOccupation').value) {
                        alert('Father Occupation is required');
                        return false;
                    }
                    if (document.getElementById('category').value === "NONE") {
                        alert('Category is required');
                        return false;
                    }
                    if (!document.getElementById('dob').value) {
                        alert('Date of Birth is required');
                        return false;
                    }
                    if (document.getElementById('maritalStatus').value === 'NONE') {
                        alert('Marital Status is required');
                        return false;
                    }
                    if (!document.getElementById('height').value) {
                        alert('Height is required');
                        return false;
                    }
                    if (!document.getElementById('weight').value) {
                        alert('Weight is required');
                        return false;
                    }
                    if (!document.getElementById('address').value) {
                        alert('Address is required');
                        return false;
                    }
                    if (document.getElementById('state').value === 'NONE') {
                        alert('State is required');
                        return false;
                    }
                    if (!document.getElementById('district').value) {
                        alert('District is required');
                        return false;
                    }
                    if (!document.getElementById('pincode').value) {
                        alert('Pincode is required');
                        return false;
                    }
                    if (document.getElementById('idType').value === 'ID Proof is required') {
                        alert('State is required');
                        return false;
                    }
                    if (!document.getElementById('document_idcard')) {
                        alert('Please upload id proof');
                        return false;
                    }
                    return true;
                }
                $(document).ready(function() {
                    $('#form11').on('submit', async function(e) {
                        if (!checker()) {
                            e.preventDefault();
                        }
                    });
                });
                $(function() {
                    $('.multiselect-ui').multiselect({
                        includeSelectAllOption: true
                    });
                });
                ! function($) {
                    "use strict"; // jshint ;_;

                    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {
                        ko.bindingHandlers.multiselect = {
                            after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],

                            init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
                                var $element = $(element);
                                var config = ko.toJS(valueAccessor());

                                $element.multiselect(config);

                                if (allBindings.has('options')) {
                                    var options = allBindings.get('options');
                                    if (ko.isObservable(options)) {
                                        ko.computed({
                                            read: function() {
                                                options();
                                                setTimeout(function() {
                                                    var ms = $element.data('multiselect');
                                                    if (ms)
                                                        ms.updateOriginalOptions(); //Not sure how beneficial this is.
                                                    $element.multiselect('rebuild');
                                                }, 1);
                                            },
                                            disposeWhenNodeIsRemoved: element
                                        });
                                    }
                                }

                                //value and selectedOptions are two-way, so these will be triggered even by our own actions.
                                //It needs some way to tell if they are triggered because of us or because of outside change.
                                //It doesn't loop but it's a waste of processing.
                                if (allBindings.has('value')) {
                                    var value = allBindings.get('value');
                                    if (ko.isObservable(value)) {
                                        ko.computed({
                                            read: function() {
                                                value();
                                                setTimeout(function() {
                                                    $element.multiselect('refresh');
                                                }, 1);
                                            },
                                            disposeWhenNodeIsRemoved: element
                                        }).extend({
                                            rateLimit: 100,
                                            notifyWhenChangesStop: true
                                        });
                                    }
                                }

                                //Switched from arrayChange subscription to general subscription using 'refresh'.
                                //Not sure performance is any better using 'select' and 'deselect'.
                                if (allBindings.has('selectedOptions')) {
                                    var selectedOptions = allBindings.get('selectedOptions');
                                    if (ko.isObservable(selectedOptions)) {
                                        ko.computed({
                                            read: function() {
                                                selectedOptions();
                                                setTimeout(function() {
                                                    $element.multiselect('refresh');
                                                }, 1);
                                            },
                                            disposeWhenNodeIsRemoved: element
                                        }).extend({
                                            rateLimit: 100,
                                            notifyWhenChangesStop: true
                                        });
                                    }
                                }

                                var setEnabled = function(enable) {
                                    setTimeout(function() {
                                        if (enable)
                                            $element.multiselect('enable');
                                        else
                                            $element.multiselect('disable');
                                    });
                                };

                                if (allBindings.has('enable')) {
                                    var enable = allBindings.get('enable');
                                    if (ko.isObservable(enable)) {
                                        ko.computed({
                                            read: function() {
                                                setEnabled(enable());
                                            },
                                            disposeWhenNodeIsRemoved: element
                                        }).extend({
                                            rateLimit: 100,
                                            notifyWhenChangesStop: true
                                        });
                                    } else {
                                        setEnabled(enable);
                                    }
                                }

                                if (allBindings.has('disable')) {
                                    var disable = allBindings.get('disable');
                                    if (ko.isObservable(disable)) {
                                        ko.computed({
                                            read: function() {
                                                setEnabled(!disable());
                                            },
                                            disposeWhenNodeIsRemoved: element
                                        }).extend({
                                            rateLimit: 100,
                                            notifyWhenChangesStop: true
                                        });
                                    } else {
                                        setEnabled(!disable);
                                    }
                                }

                                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
                                    $element.multiselect('destroy');
                                });
                            },

                            update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
                                var $element = $(element);
                                var config = ko.toJS(valueAccessor());

                                $element.multiselect('setOptions', config);
                                $element.multiselect('rebuild');
                            }
                        };
                    }

                    function forEach(array, callback) {
                        for (var index = 0; index < array.length; ++index) {
                            callback(array[index], index);
                        }
                    }

                    /**
                     * Constructor to create a new multiselect using the given select.
                     *
                     * @param {jQuery} select
                     * @param {Object} options
                     * @returns {Multiselect}
                     */
                    function Multiselect(select, options) {

                        this.$select = $(select);
                        this.options = this.mergeOptions($.extend({}, options, this.$select.data()));

                        // Placeholder via data attributes
                        if (this.$select.attr("data-placeholder")) {
                            this.options.nonSelectedText = this.$select.data("placeholder");
                        }

                        // Initialization.
                        // We have to clone to create a new reference.
                        this.originalOptions = this.$select.clone()[0].options;
                        this.query = '';
                        this.searchTimeout = null;
                        this.lastToggledInput = null;

                        this.options.multiple = this.$select.attr('multiple') === "multiple";
                        this.options.onChange = $.proxy(this.options.onChange, this);
                        this.options.onSelectAll = $.proxy(this.options.onSelectAll, this);
                        this.options.onDeselectAll = $.proxy(this.options.onDeselectAll, this);
                        this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);
                        this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);
                        this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);
                        this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);
                        this.options.onInitialized = $.proxy(this.options.onInitialized, this);
                        this.options.onFiltering = $.proxy(this.options.onFiltering, this);

                        // Build select all if enabled.
                        this.buildContainer();
                        this.buildButton();
                        this.buildDropdown();
                        this.buildSelectAll();
                        this.buildDropdownOptions();
                        this.buildFilter();

                        this.updateButtonText();
                        this.updateSelectAll(true);

                        if (this.options.enableClickableOptGroups && this.options.multiple) {
                            this.updateOptGroups();
                        }

                        this.options.wasDisabled = this.$select.prop('disabled');
                        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {
                            this.disable();
                        }

                        this.$select.wrap('<span class="multiselect-native-select" />').after(this.$container);
                        this.options.onInitialized(this.$select, this.$container);
                    }

                    Multiselect.prototype = {

                        defaults: {
                            /**
                             * Default text function will either print 'None selected' in case no
                             * option is selected or a list of the selected options up to a length
                             * of 3 selected options.
                             *
                             * @param {jQuery} options
                             * @param {jQuery} select
                             * @returns {String}
                             */
                            buttonText: function(options, select) {
                                if (this.disabledText.length > 0 &&
                                    (select.prop('disabled') || (options.length == 0 && this.disableIfEmpty))) {

                                    return this.disabledText;
                                } else if (options.length === 0) {
                                    return this.nonSelectedText;
                                } else if (this.allSelectedText &&
                                    options.length === $('option', $(select)).length &&
                                    $('option', $(select)).length !== 1 &&
                                    this.multiple) {

                                    if (this.selectAllNumber) {
                                        return this.allSelectedText + ' (' + options.length + ')';
                                    } else {
                                        return this.allSelectedText;
                                    }
                                } else if (options.length > this.numberDisplayed) {
                                    return options.length + ' ' + this.nSelectedText;
                                } else {
                                    var selected = '';
                                    var delimiter = this.delimiterText;

                                    options.each(function() {
                                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();
                                        selected += label + delimiter;
                                    });

                                    return selected.substr(0, selected.length - this.delimiterText.length);
                                }
                            },
                            /**
                             * Updates the title of the button similar to the buttonText function.
                             *
                             * @param {jQuery} options
                             * @param {jQuery} select
                             * @returns {@exp;selected@call;substr}
                             */
                            buttonTitle: function(options, select) {
                                if (options.length === 0) {
                                    return this.nonSelectedText;
                                } else {
                                    var selected = '';
                                    var delimiter = this.delimiterText;

                                    options.each(function() {
                                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();
                                        selected += label + delimiter;
                                    });
                                    return selected.substr(0, selected.length - this.delimiterText.length);
                                }
                            },
                            checkboxName: function(option) {
                                return false; // no checkbox name
                            },
                            /**
                             * Create a label.
                             *
                             * @param {jQuery} element
                             * @returns {String}
                             */
                            optionLabel: function(element) {
                                return $(element).attr('label') || $(element).text();
                            },
                            /**
                             * Create a class.
                             *
                             * @param {jQuery} element
                             * @returns {String}
                             */
                            optionClass: function(element) {
                                return $(element).attr('class') || '';
                            },
                            /**
                             * Triggered on change of the multiselect.
                             *
                             * Not triggered when selecting/deselecting options manually.
                             *
                             * @param {jQuery} option
                             * @param {Boolean} checked
                             */
                            onChange: function(option, checked) {

                            },
                            /**
                             * Triggered when the dropdown is shown.
                             *
                             * @param {jQuery} event
                             */
                            onDropdownShow: function(event) {

                            },
                            /**
                             * Triggered when the dropdown is hidden.
                             *
                             * @param {jQuery} event
                             */
                            onDropdownHide: function(event) {

                            },
                            /**
                             * Triggered after the dropdown is shown.
                             *
                             * @param {jQuery} event
                             */
                            onDropdownShown: function(event) {

                            },
                            /**
                             * Triggered after the dropdown is hidden.
                             *
                             * @param {jQuery} event
                             */
                            onDropdownHidden: function(event) {

                            },
                            /**
                             * Triggered on select all.
                             */
                            onSelectAll: function() {

                            },
                            /**
                             * Triggered on deselect all.
                             */
                            onDeselectAll: function() {

                            },
                            /**
                             * Triggered after initializing.
                             *
                             * @param {jQuery} $select
                             * @param {jQuery} $container
                             */
                            onInitialized: function($select, $container) {

                            },
                            /**
                             * Triggered on filtering.
                             *
                             * @param {jQuery} $filter
                             */
                            onFiltering: function($filter) {

                            },
                            enableHTML: false,
                            buttonClass: 'btn btn-default',
                            inheritClass: false,
                            buttonWidth: 'auto',
                            buttonContainer: '<div class="" />',
                            dropRight: false,
                            dropUp: false,
                            selectedClass: 'active',
                            // Maximum height of the dropdown menu.
                            // If maximum height is exceeded a scrollbar will be displayed.
                            maxHeight: false,
                            includeSelectAllOption: false,
                            includeSelectAllIfMoreThan: 0,
                            selectAllText: ' Select all',
                            selectAllValue: 'multiselect-all',
                            selectAllName: false,
                            selectAllNumber: true,
                            selectAllJustVisible: true,
                            enableFiltering: false,
                            enableCaseInsensitiveFiltering: false,
                            enableFullValueFiltering: false,
                            enableClickableOptGroups: false,
                            enableCollapsibleOptGroups: false,
                            filterPlaceholder: 'Search',
                            // possible options: 'text', 'value', 'both'
                            filterBehavior: 'text',
                            includeFilterClearBtn: true,
                            preventInputChangeEvent: false,
                            nonSelectedText: 'None selected',
                            nSelectedText: 'selected',
                            allSelectedText: 'All selected',
                            numberDisplayed: 3,
                            disableIfEmpty: false,
                            disabledText: '',
                            delimiterText: ', ',
                            templates: {
                                button: '<button type="button" class="multiselect dropdown-toggle btn-block text-left" data-toggle="dropdown"><span class="multiselect-selected-text"></span> <b class="caret"></b></button>',
                                ul: '<ul class="multiselect-container dropdown-menu"></ul>',
                                filter: '<li class="multiselect-item multiselect-filter"><div class="input-group"><span class="input-group-addon"><i class="glyphicon glyphicon-search"></i></span><input class="form-control multiselect-search" type="text"></div></li>',
                                filterClearBtn: '<span class="input-group-btn"><button class="btn btn-default multiselect-clear-filter" type="button"><i class="glyphicon glyphicon-remove-circle"></i></button></span>',
                                li: '<li><a tabindex="0"><label></label></a></li>',
                                divider: '<li class="multiselect-item divider"></li>',
                                liGroup: '<li class="multiselect-item multiselect-group"><label></label></li>'
                            }
                        },

                        constructor: Multiselect,

                        /**
                         * Builds the container of the multiselect.
                         */
                        buildContainer: function() {
                            this.$container = $(this.options.buttonContainer);
                            this.$container.on('show.bs.dropdown', this.options.onDropdownShow);
                            this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);
                            this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);
                            this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);
                        },

                        /**
                         * Builds the button of the multiselect.
                         */
                        buildButton: function() {
                            this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);
                            if (this.$select.attr('class') && this.options.inheritClass) {
                                this.$button.addClass(this.$select.attr('class'));
                            }
                            // Adopt active state.
                            if (this.$select.prop('disabled')) {
                                this.disable();
                            } else {
                                this.enable();
                            }

                            // Manually add button width if set.
                            if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {
                                this.$button.css({
                                    'width': '100%', //this.options.buttonWidth,
                                    'overflow': 'hidden',
                                    'text-overflow': 'ellipsis'
                                });
                                this.$container.css({
                                    'width': this.options.buttonWidth
                                });
                            }

                            // Keep the tab index from the select.
                            var tabindex = this.$select.attr('tabindex');
                            if (tabindex) {
                                this.$button.attr('tabindex', tabindex);
                            }

                            this.$container.prepend(this.$button);
                        },

                        /**
                         * Builds the ul representing the dropdown menu.
                         */
                        buildDropdown: function() {

                            // Build ul.
                            this.$ul = $(this.options.templates.ul);

                            if (this.options.dropRight) {
                                this.$ul.addClass('pull-right');
                            }

                            // Set max height of dropdown menu to activate auto scrollbar.
                            if (this.options.maxHeight) {
                                // TODO: Add a class for this option to move the css declarations.
                                this.$ul.css({
                                    'max-height': this.options.maxHeight + 'px',
                                    'overflow-y': 'auto',
                                    'overflow-x': 'hidden'
                                });
                            }

                            if (this.options.dropUp) {

                                var height = Math.min(this.options.maxHeight, $('option[data-role!="divider"]', this.$select).length * 26 + $('option[data-role="divider"]', this.$select).length * 19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));
                                var moveCalc = height + 34;

                                this.$ul.css({
                                    'max-height': height + 'px',
                                    'overflow-y': 'auto',
                                    'overflow-x': 'hidden',
                                    'margin-top': "-" + moveCalc + 'px'
                                });
                            }

                            this.$container.append(this.$ul);
                        },

                        /**
                         * Build the dropdown options and binds all necessary events.
                         *
                         * Uses createDivider and createOptionValue to create the necessary options.
                         */
                        buildDropdownOptions: function() {

                            this.$select.children().each($.proxy(function(index, element) {

                                var $element = $(element);
                                // Support optgroups and options without a group simultaneously.
                                var tag = $element.prop('tagName')
                                    .toLowerCase();

                                if ($element.prop('value') === this.options.selectAllValue) {
                                    return;
                                }

                                if (tag === 'optgroup') {
                                    this.createOptgroup(element);
                                } else if (tag === 'option') {

                                    if ($element.data('role') === 'divider') {
                                        this.createDivider();
                                    } else {
                                        this.createOptionValue(element);
                                    }

                                }

                                // Other illegal tags will be ignored.
                            }, this));

                            // Bind the change event on the dropdown elements.
                            $('li:not(.multiselect-group) input', this.$ul).on('change', $.proxy(function(event) {
                                var $target = $(event.target);

                                var checked = $target.prop('checked') || false;
                                var isSelectAllOption = $target.val() === this.options.selectAllValue;

                                // Apply or unapply the configured selected class.
                                if (this.options.selectedClass) {
                                    if (checked) {
                                        $target.closest('li')
                                            .addClass(this.options.selectedClass);
                                    } else {
                                        $target.closest('li')
                                            .removeClass(this.options.selectedClass);
                                    }
                                }

                                // Get the corresponding option.
                                var value = $target.val();
                                var $option = this.getOptionByValue(value);

                                var $optionsNotThis = $('option', this.$select).not($option);
                                var $checkboxesNotThis = $('input', this.$container).not($target);

                                if (isSelectAllOption) {

                                    if (checked) {
                                        this.selectAll(this.options.selectAllJustVisible, true);
                                    } else {
                                        this.deselectAll(this.options.selectAllJustVisible, true);
                                    }
                                } else {
                                    if (checked) {
                                        $option.prop('selected', true);

                                        if (this.options.multiple) {
                                            // Simply select additional option.
                                            $option.prop('selected', true);
                                        } else {
                                            // Unselect all other options and corresponding checkboxes.
                                            if (this.options.selectedClass) {
                                                $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);
                                            }

                                            $($checkboxesNotThis).prop('checked', false);
                                            $optionsNotThis.prop('selected', false);

                                            // It's a single selection, so close.
                                            this.$button.click();
                                        }

                                        if (this.options.selectedClass === "active") {
                                            $optionsNotThis.closest("a").css("outline", "");
                                        }
                                    } else {
                                        // Unselect option.
                                        $option.prop('selected', false);
                                    }

                                    // To prevent select all from firing onChange: #575
                                    this.options.onChange($option, checked);

                                    // Do not update select all or optgroups on select all change!
                                    this.updateSelectAll();

                                    if (this.options.enableClickableOptGroups && this.options.multiple) {
                                        this.updateOptGroups();
                                    }
                                }

                                this.$select.change();
                                this.updateButtonText();

                                if (this.options.preventInputChangeEvent) {
                                    return false;
                                }
                            }, this));

                            $('li a', this.$ul).on('mousedown', function(e) {
                                if (e.shiftKey) {
                                    // Prevent selecting text by Shift+click
                                    return false;
                                }
                            });

                            $('li a', this.$ul).on('touchstart click', $.proxy(function(event) {
                                event.stopPropagation();

                                var $target = $(event.target);

                                if (event.shiftKey && this.options.multiple) {
                                    if ($target.is("label")) { // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)
                                        event.preventDefault();
                                        $target = $target.find("input");
                                        $target.prop("checked", !$target.prop("checked"));
                                    }
                                    var checked = $target.prop('checked') || false;

                                    if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range
                                        var from = $target.closest("li").index();
                                        var to = this.lastToggledInput.closest("li").index();

                                        if (from > to) { // Swap the indices
                                            var tmp = to;
                                            to = from;
                                            from = tmp;
                                        }

                                        // Make sure we grab all elements since slice excludes the last index
                                        ++to;

                                        // Change the checkboxes and underlying options
                                        var range = this.$ul.find("li").slice(from, to).find("input");

                                        range.prop('checked', checked);

                                        if (this.options.selectedClass) {
                                            range.closest('li')
                                                .toggleClass(this.options.selectedClass, checked);
                                        }

                                        for (var i = 0, j = range.length; i < j; i++) {
                                            var $checkbox = $(range[i]);

                                            var $option = this.getOptionByValue($checkbox.val());

                                            $option.prop('selected', checked);
                                        }
                                    }

                                    // Trigger the select "change" event
                                    $target.trigger("change");
                                }

                                // Remembers last clicked option
                                if ($target.is("input") && !$target.closest("li").is(".multiselect-item")) {
                                    this.lastToggledInput = $target;
                                }

                                $target.blur();
                            }, this));

                            // Keyboard support.
                            this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function(event) {
                                if ($('input[type="text"]', this.$container).is(':focus')) {
                                    return;
                                }

                                if (event.keyCode === 9 && this.$container.hasClass('open')) {
                                    this.$button.click();
                                } else {
                                    var $items = $(this.$container).find("li:not(.divider):not(.disabled) a").filter(":visible");

                                    if (!$items.length) {
                                        return;
                                    }

                                    var index = $items.index($items.filter(':focus'));

                                    // Navigation up.
                                    if (event.keyCode === 38 && index > 0) {
                                        index--;
                                    }
                                    // Navigate down.
                                    else if (event.keyCode === 40 && index < $items.length - 1) {
                                        index++;
                                    } else if (!~index) {
                                        index = 0;
                                    }

                                    var $current = $items.eq(index);
                                    $current.focus();

                                    if (event.keyCode === 32 || event.keyCode === 13) {
                                        var $checkbox = $current.find('input');

                                        $checkbox.prop("checked", !$checkbox.prop("checked"));
                                        $checkbox.change();
                                    }

                                    event.stopPropagation();
                                    event.preventDefault();
                                }
                            }, this));

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                $("li.multiselect-group input", this.$ul).on("change", $.proxy(function(event) {
                                    event.stopPropagation();

                                    var $target = $(event.target);
                                    var checked = $target.prop('checked') || false;

                                    var $li = $(event.target).closest('li');
                                    var $group = $li.nextUntil("li.multiselect-group")
                                        .not('.multiselect-filter-hidden')
                                        .not('.disabled');

                                    var $inputs = $group.find("input");

                                    var values = [];
                                    var $options = [];

                                    if (this.options.selectedClass) {
                                        if (checked) {
                                            $li.addClass(this.options.selectedClass);
                                        } else {
                                            $li.removeClass(this.options.selectedClass);
                                        }
                                    }

                                    $.each($inputs, $.proxy(function(index, input) {
                                        var value = $(input).val();
                                        var $option = this.getOptionByValue(value);

                                        if (checked) {
                                            $(input).prop('checked', true);
                                            $(input).closest('li')
                                                .addClass(this.options.selectedClass);

                                            $option.prop('selected', true);
                                        } else {
                                            $(input).prop('checked', false);
                                            $(input).closest('li')
                                                .removeClass(this.options.selectedClass);

                                            $option.prop('selected', false);
                                        }

                                        $options.push(this.getOptionByValue(value));
                                    }, this))

                                    // Cannot use select or deselect here because it would call updateOptGroups again.

                                    this.options.onChange($options, checked);

                                    this.updateButtonText();
                                    this.updateSelectAll();
                                }, this));
                            }

                            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {
                                $("li.multiselect-group .caret-container", this.$ul).on("click", $.proxy(function(event) {
                                    var $li = $(event.target).closest('li');
                                    var $inputs = $li.nextUntil("li.multiselect-group")
                                        .not('.multiselect-filter-hidden');

                                    var visible = true;
                                    $inputs.each(function() {
                                        visible = visible && $(this).is(':visible');
                                    });

                                    if (visible) {
                                        $inputs.hide()
                                            .addClass('multiselect-collapsible-hidden');
                                    } else {
                                        $inputs.show()
                                            .removeClass('multiselect-collapsible-hidden');
                                    }
                                }, this));

                                $("li.multiselect-all", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');
                                $("li.multiselect-all > a > label.checkbox", this.$ul).css('padding', '3px 20px 3px 35px');
                                $("li.multiselect-group > a > input", this.$ul).css('margin', '4px 0px 5px -20px');
                            }
                        },

                        /**
                         * Create an option using the given select option.
                         *
                         * @param {jQuery} element
                         */
                        createOptionValue: function(element) {
                            var $element = $(element);
                            if ($element.is(':selected')) {
                                $element.prop('selected', true);
                            }

                            // Support the label attribute on options.
                            var label = this.options.optionLabel(element);
                            var classes = this.options.optionClass(element);
                            var value = $element.val();
                            var inputType = this.options.multiple ? "checkbox" : "radio";

                            var $li = $(this.options.templates.li);
                            var $label = $('label', $li);
                            $label.addClass(inputType);
                            $li.addClass(classes);

                            if (this.options.enableHTML) {
                                $label.html(" " + label);
                            } else {
                                $label.text(" " + label);
                            }

                            var $checkbox = $('<input/>').attr('type', inputType);

                            var name = this.options.checkboxName($element);
                            if (name) {
                                $checkbox.attr('name', name);
                            }

                            $label.prepend($checkbox);

                            var selected = $element.prop('selected') || false;
                            $checkbox.val(value);

                            if (value === this.options.selectAllValue) {
                                $li.addClass("multiselect-item multiselect-all");
                                $checkbox.parent().parent()
                                    .addClass('multiselect-all');
                            }

                            $label.attr('title', $element.attr('title'));

                            this.$ul.append($li);

                            if ($element.is(':disabled')) {
                                $checkbox.attr('disabled', 'disabled')
                                    .prop('disabled', true)
                                    .closest('a')
                                    .attr("tabindex", "-1")
                                    .closest('li')
                                    .addClass('disabled');
                            }

                            $checkbox.prop('checked', selected);

                            if (selected && this.options.selectedClass) {
                                $checkbox.closest('li')
                                    .addClass(this.options.selectedClass);
                            }
                        },

                        /**
                         * Creates a divider using the given select option.
                         *
                         * @param {jQuery} element
                         */
                        createDivider: function(element) {
                            var $divider = $(this.options.templates.divider);
                            this.$ul.append($divider);
                        },

                        /**
                         * Creates an optgroup.
                         *
                         * @param {jQuery} group
                         */
                        createOptgroup: function(group) {
                            var label = $(group).attr("label");
                            var value = $(group).attr("value");
                            var $li = $('<li class="multiselect-item multiselect-group"><a href="javascript:void(0);"><label><b></b></label></a></li>');

                            var classes = this.options.optionClass(group);
                            $li.addClass(classes);

                            if (this.options.enableHTML) {
                                $('label b', $li).html(" " + label);
                            } else {
                                $('label b', $li).text(" " + label);
                            }

                            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {
                                $('a', $li).append('<span class="caret-container"><b class="caret"></b></span>');
                            }

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                $('a label', $li).prepend('<input type="checkbox" value="' + value + '"/>');
                            }

                            if ($(group).is(':disabled')) {
                                $li.addClass('disabled');
                            }

                            this.$ul.append($li);

                            $("option", group).each($.proxy(function($, group) {
                                this.createOptionValue(group);
                            }, this))
                        },

                        /**
                         * Build the select all.
                         *
                         * Checks if a select all has already been created.
                         */
                        buildSelectAll: function() {
                            if (typeof this.options.selectAllValue === 'number') {
                                this.options.selectAllValue = this.options.selectAllValue.toString();
                            }

                            var alreadyHasSelectAll = this.hasSelectAll();

                            if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple &&
                                $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {

                                // Check whether to add a divider after the select all.
                                if (this.options.includeSelectAllDivider) {
                                    this.$ul.prepend($(this.options.templates.divider));
                                }

                                var $li = $(this.options.templates.li);
                                $('label', $li).addClass("checkbox");

                                if (this.options.enableHTML) {
                                    $('label', $li).html(" " + this.options.selectAllText);
                                } else {
                                    $('label', $li).text(" " + this.options.selectAllText);
                                }

                                if (this.options.selectAllName) {
                                    $('label', $li).prepend('<input type="checkbox" name="' + this.options.selectAllName + '" />');
                                } else {
                                    $('label', $li).prepend('<input type="checkbox" />');
                                }

                                var $checkbox = $('input', $li);
                                $checkbox.val(this.options.selectAllValue);

                                $li.addClass("multiselect-item multiselect-all");
                                $checkbox.parent().parent()
                                    .addClass('multiselect-all');

                                this.$ul.prepend($li);

                                $checkbox.prop('checked', false);
                            }
                        },

                        /**
                         * Builds the filter.
                         */
                        buildFilter: function() {

                            // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.
                            if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {
                                var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);

                                if (this.$select.find('option').length >= enableFilterLength) {

                                    this.$filter = $(this.options.templates.filter);
                                    $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);

                                    // Adds optional filter clear button
                                    if (this.options.includeFilterClearBtn) {
                                        var clearBtn = $(this.options.templates.filterClearBtn);
                                        clearBtn.on('click', $.proxy(function(event) {
                                            clearTimeout(this.searchTimeout);

                                            this.$filter.find('.multiselect-search').val('');
                                            $('li', this.$ul).show().removeClass('multiselect-filter-hidden');

                                            this.updateSelectAll();

                                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                                this.updateOptGroups();
                                            }

                                        }, this));
                                        this.$filter.find('.input-group').append(clearBtn);
                                    }

                                    this.$ul.prepend(this.$filter);

                                    this.$filter.val(this.query).on('click', function(event) {
                                        event.stopPropagation();
                                    }).on('input keydown', $.proxy(function(event) {
                                        // Cancel enter key default behaviour
                                        if (event.which === 13) {
                                            event.preventDefault();
                                        }

                                        // This is useful to catch "keydown" events after the browser has updated the control.
                                        clearTimeout(this.searchTimeout);

                                        this.searchTimeout = this.asyncFunction($.proxy(function() {

                                            if (this.query !== event.target.value) {
                                                this.query = event.target.value;

                                                var currentGroup, currentGroupVisible;
                                                $.each($('li', this.$ul), $.proxy(function(index, element) {
                                                    var value = $('input', element).length > 0 ? $('input', element).val() : "";
                                                    var text = $('label', element).text();

                                                    var filterCandidate = '';
                                                    if ((this.options.filterBehavior === 'text')) {
                                                        filterCandidate = text;
                                                    } else if ((this.options.filterBehavior === 'value')) {
                                                        filterCandidate = value;
                                                    } else if (this.options.filterBehavior === 'both') {
                                                        filterCandidate = text + '\n' + value;
                                                    }

                                                    if (value !== this.options.selectAllValue && text) {

                                                        // By default lets assume that element is not
                                                        // interesting for this search.
                                                        var showElement = false;

                                                        if (this.options.enableCaseInsensitiveFiltering) {
                                                            filterCandidate = filterCandidate.toLowerCase();
                                                            this.query = this.query.toLowerCase();
                                                        }

                                                        if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {
                                                            var valueToMatch = filterCandidate.trim().substring(0, this.query.length);
                                                            if (this.query.indexOf(valueToMatch) > -1) {
                                                                showElement = true;
                                                            }
                                                        } else if (filterCandidate.indexOf(this.query) > -1) {
                                                            showElement = true;
                                                        }

                                                        // Toggle current element (group or group item) according to showElement boolean.
                                                        $(element).toggle(showElement)
                                                            .toggleClass('multiselect-filter-hidden', !showElement);

                                                        // Differentiate groups and group items.
                                                        if ($(element).hasClass('multiselect-group')) {
                                                            // Remember group status.
                                                            currentGroup = element;
                                                            currentGroupVisible = showElement;
                                                        } else {
                                                            // Show group name when at least one of its items is visible.
                                                            if (showElement) {
                                                                $(currentGroup).show()
                                                                    .removeClass('multiselect-filter-hidden');
                                                            }

                                                            // Show all group items when group name satisfies filter.
                                                            if (!showElement && currentGroupVisible) {
                                                                $(element).show()
                                                                    .removeClass('multiselect-filter-hidden');
                                                            }
                                                        }
                                                    }
                                                }, this));
                                            }

                                            this.updateSelectAll();

                                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                                this.updateOptGroups();
                                            }

                                            this.options.onFiltering(event.target);

                                        }, this), 300, this);
                                    }, this));
                                }
                            }
                        },

                        /**
                         * Unbinds the whole plugin.
                         */
                        destroy: function() {
                            this.$container.remove();
                            this.$select.show();

                            // reset original state
                            this.$select.prop('disabled', this.options.wasDisabled);

                            this.$select.data('multiselect', null);
                        },

                        /**
                         * Refreshs the multiselect based on the selected options of the select.
                         */
                        refresh: function() {
                            var inputs = $.map($('li input', this.$ul), $);

                            $('option', this.$select).each($.proxy(function(index, element) {
                                var $elem = $(element);
                                var value = $elem.val();
                                var $input;
                                for (var i = inputs.length; 0 < i--; /**/ ) {
                                    if (value !== ($input = inputs[i]).val())
                                        continue; // wrong li

                                    if ($elem.is(':selected')) {
                                        $input.prop('checked', true);

                                        if (this.options.selectedClass) {
                                            $input.closest('li')
                                                .addClass(this.options.selectedClass);
                                        }
                                    } else {
                                        $input.prop('checked', false);

                                        if (this.options.selectedClass) {
                                            $input.closest('li')
                                                .removeClass(this.options.selectedClass);
                                        }
                                    }

                                    if ($elem.is(":disabled")) {
                                        $input.attr('disabled', 'disabled')
                                            .prop('disabled', true)
                                            .closest('li')
                                            .addClass('disabled');
                                    } else {
                                        $input.prop('disabled', false)
                                            .closest('li')
                                            .removeClass('disabled');
                                    }
                                    break; // assumes unique values
                                }
                            }, this));

                            this.updateButtonText();
                            this.updateSelectAll();

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                this.updateOptGroups();
                            }
                        },

                        /**
                         * Select all options of the given values.
                         *
                         * If triggerOnChange is set to true, the on change event is triggered if
                         * and only if one value is passed.
                         *
                         * @param {Array} selectValues
                         * @param {Boolean} triggerOnChange
                         */
                        select: function(selectValues, triggerOnChange) {
                            if (!$.isArray(selectValues)) {
                                selectValues = [selectValues];
                            }

                            for (var i = 0; i < selectValues.length; i++) {
                                var value = selectValues[i];

                                if (value === null || value === undefined) {
                                    continue;
                                }

                                var $option = this.getOptionByValue(value);
                                var $checkbox = this.getInputByValue(value);

                                if ($option === undefined || $checkbox === undefined) {
                                    continue;
                                }

                                if (!this.options.multiple) {
                                    this.deselectAll(false);
                                }

                                if (this.options.selectedClass) {
                                    $checkbox.closest('li')
                                        .addClass(this.options.selectedClass);
                                }

                                $checkbox.prop('checked', true);
                                $option.prop('selected', true);

                                if (triggerOnChange) {
                                    this.options.onChange($option, true);
                                }
                            }

                            this.updateButtonText();
                            this.updateSelectAll();

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                this.updateOptGroups();
                            }
                        },

                        /**
                         * Clears all selected items.
                         */
                        clearSelection: function() {
                            this.deselectAll(false);
                            this.updateButtonText();
                            this.updateSelectAll();

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                this.updateOptGroups();
                            }
                        },

                        /**
                         * Deselects all options of the given values.
                         *
                         * If triggerOnChange is set to true, the on change event is triggered, if
                         * and only if one value is passed.
                         *
                         * @param {Array} deselectValues
                         * @param {Boolean} triggerOnChange
                         */
                        deselect: function(deselectValues, triggerOnChange) {
                            if (!$.isArray(deselectValues)) {
                                deselectValues = [deselectValues];
                            }

                            for (var i = 0; i < deselectValues.length; i++) {
                                var value = deselectValues[i];

                                if (value === null || value === undefined) {
                                    continue;
                                }

                                var $option = this.getOptionByValue(value);
                                var $checkbox = this.getInputByValue(value);

                                if ($option === undefined || $checkbox === undefined) {
                                    continue;
                                }

                                if (this.options.selectedClass) {
                                    $checkbox.closest('li')
                                        .removeClass(this.options.selectedClass);
                                }

                                $checkbox.prop('checked', false);
                                $option.prop('selected', false);

                                if (triggerOnChange) {
                                    this.options.onChange($option, false);
                                }
                            }

                            this.updateButtonText();
                            this.updateSelectAll();

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                this.updateOptGroups();
                            }
                        },

                        /**
                         * Selects all enabled & visible options.
                         *
                         * If justVisible is true or not specified, only visible options are selected.
                         *
                         * @param {Boolean} justVisible
                         * @param {Boolean} triggerOnSelectAll
                         */
                        selectAll: function(justVisible, triggerOnSelectAll) {

                            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;
                            var allLis = $("li:not(.divider):not(.disabled):not(.multiselect-group)", this.$ul);
                            var visibleLis = $("li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)", this.$ul).filter(':visible');

                            if (justVisible) {
                                $('input:enabled', visibleLis).prop('checked', true);
                                visibleLis.addClass(this.options.selectedClass);

                                $('input:enabled', visibleLis).each($.proxy(function(index, element) {
                                    var value = $(element).val();
                                    var option = this.getOptionByValue(value);
                                    $(option).prop('selected', true);
                                }, this));
                            } else {
                                $('input:enabled', allLis).prop('checked', true);
                                allLis.addClass(this.options.selectedClass);

                                $('input:enabled', allLis).each($.proxy(function(index, element) {
                                    var value = $(element).val();
                                    var option = this.getOptionByValue(value);
                                    $(option).prop('selected', true);
                                }, this));
                            }

                            $('li input[value="' + this.options.selectAllValue + '"]', this.$ul).prop('checked', true);

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                this.updateOptGroups();
                            }

                            if (triggerOnSelectAll) {
                                this.options.onSelectAll();
                            }
                        },

                        /**
                         * Deselects all options.
                         *
                         * If justVisible is true or not specified, only visible options are deselected.
                         *
                         * @param {Boolean} justVisible
                         */
                        deselectAll: function(justVisible, triggerOnDeselectAll) {

                            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;
                            var allLis = $("li:not(.divider):not(.disabled):not(.multiselect-group)", this.$ul);
                            var visibleLis = $("li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)", this.$ul).filter(':visible');

                            if (justVisible) {
                                $('input[type="checkbox"]:enabled', visibleLis).prop('checked', false);
                                visibleLis.removeClass(this.options.selectedClass);

                                $('input[type="checkbox"]:enabled', visibleLis).each($.proxy(function(index, element) {
                                    var value = $(element).val();
                                    var option = this.getOptionByValue(value);
                                    $(option).prop('selected', false);
                                }, this));
                            } else {
                                $('input[type="checkbox"]:enabled', allLis).prop('checked', false);
                                allLis.removeClass(this.options.selectedClass);

                                $('input[type="checkbox"]:enabled', allLis).each($.proxy(function(index, element) {
                                    var value = $(element).val();
                                    var option = this.getOptionByValue(value);
                                    $(option).prop('selected', false);
                                }, this));
                            }

                            $('li input[value="' + this.options.selectAllValue + '"]', this.$ul).prop('checked', false);

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                this.updateOptGroups();
                            }

                            if (triggerOnDeselectAll) {
                                this.options.onDeselectAll();
                            }
                        },

                        /**
                         * Rebuild the plugin.
                         *
                         * Rebuilds the dropdown, the filter and the select all option.
                         */
                        rebuild: function() {
                            this.$ul.html('');

                            // Important to distinguish between radios and checkboxes.
                            this.options.multiple = this.$select.attr('multiple') === "multiple";

                            this.buildSelectAll();
                            this.buildDropdownOptions();
                            this.buildFilter();

                            this.updateButtonText();
                            this.updateSelectAll(true);

                            if (this.options.enableClickableOptGroups && this.options.multiple) {
                                this.updateOptGroups();
                            }

                            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {
                                this.disable();
                            } else {
                                this.enable();
                            }

                            if (this.options.dropRight) {
                                this.$ul.addClass('pull-right');
                            }
                        },

                        /**
                         * The provided data will be used to build the dropdown.
                         */
                        dataprovider: function(dataprovider) {

                            var groupCounter = 0;
                            var $select = this.$select.empty();

                            $.each(dataprovider, function(index, option) {
                                var $tag;

                                if ($.isArray(option.children)) { // create optiongroup tag
                                    groupCounter++;

                                    $tag = $('<optgroup/>').attr({
                                        label: option.label || 'Group ' + groupCounter,
                                        disabled: !!option.disabled
                                    });

                                    forEach(option.children, function(subOption) { // add children option tags
                                        var attributes = {
                                            value: subOption.value,
                                            label: subOption.label || subOption.value,
                                            title: subOption.title,
                                            selected: !!subOption.selected,
                                            disabled: !!subOption.disabled
                                        };

                                        //Loop through attributes object and add key-value for each attribute
                                        for (var key in subOption.attributes) {
                                            attributes['data-' + key] = subOption.attributes[key];
                                        }
                                        //Append original attributes + new data attributes to option
                                        $tag.append($('<option/>').attr(attributes));
                                    });
                                } else {

                                    var attributes = {
                                        'value': option.value,
                                        'label': option.label || option.value,
                                        'title': option.title,
                                        'class': option.class,
                                        'selected': !!option.selected,
                                        'disabled': !!option.disabled
                                    };
                                    //Loop through attributes object and add key-value for each attribute
                                    for (var key in option.attributes) {
                                        attributes['data-' + key] = option.attributes[key];
                                    }
                                    //Append original attributes + new data attributes to option
                                    $tag = $('<option/>').attr(attributes);

                                    $tag.text(option.label || option.value);
                                }

                                $select.append($tag);
                            });

                            this.rebuild();
                        },

                        /**
                         * Enable the multiselect.
                         */
                        enable: function() {
                            this.$select.prop('disabled', false);
                            this.$button.prop('disabled', false)
                                .removeClass('disabled');
                        },

                        /**
                         * Disable the multiselect.
                         */
                        disable: function() {
                            this.$select.prop('disabled', true);
                            this.$button.prop('disabled', true)
                                .addClass('disabled');
                        },

                        /**
                         * Set the options.
                         *
                         * @param {Array} options
                         */
                        setOptions: function(options) {
                            this.options = this.mergeOptions(options);
                        },

                        /**
                         * Merges the given options with the default options.
                         *
                         * @param {Array} options
                         * @returns {Array}
                         */
                        mergeOptions: function(options) {
                            return $.extend(true, {}, this.defaults, this.options, options);
                        },

                        /**
                         * Checks whether a select all checkbox is present.
                         *
                         * @returns {Boolean}
                         */
                        hasSelectAll: function() {
                            return $('li.multiselect-all', this.$ul).length > 0;
                        },

                        /**
                         * Update opt groups.
                         */
                        updateOptGroups: function() {
                            var $groups = $('li.multiselect-group', this.$ul)
                            var selectedClass = this.options.selectedClass;

                            $groups.each(function() {
                                var $options = $(this).nextUntil('li.multiselect-group')
                                    .not('.multiselect-filter-hidden')
                                    .not('.disabled');

                                var checked = true;
                                $options.each(function() {
                                    var $input = $('input', this);

                                    if (!$input.prop('checked')) {
                                        checked = false;
                                    }
                                });

                                if (selectedClass) {
                                    if (checked) {
                                        $(this).addClass(selectedClass);
                                    } else {
                                        $(this).removeClass(selectedClass);
                                    }
                                }

                                $('input', this).prop('checked', checked);
                            });
                        },

                        /**
                         * Updates the select all checkbox based on the currently displayed and selected checkboxes.
                         */
                        updateSelectAll: function(notTriggerOnSelectAll) {
                            if (this.hasSelectAll()) {
                                var allBoxes = $("li:not(.multiselect-item):not(.multiselect-filter-hidden):not(.multiselect-group):not(.disabled) input:enabled", this.$ul);
                                var allBoxesLength = allBoxes.length;
                                var checkedBoxesLength = allBoxes.filter(":checked").length;
                                var selectAllLi = $("li.multiselect-all", this.$ul);
                                var selectAllInput = selectAllLi.find("input");

                                if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {
                                    selectAllInput.prop("checked", true);
                                    selectAllLi.addClass(this.options.selectedClass);
                                } else {
                                    selectAllInput.prop("checked", false);
                                    selectAllLi.removeClass(this.options.selectedClass);
                                }
                            }
                        },

                        /**
                         * Update the button text and its title based on the currently selected options.
                         */
                        updateButtonText: function() {
                            var options = this.getSelected();

                            // First update the displayed button text.
                            if (this.options.enableHTML) {
                                $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));
                            } else {
                                $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));
                            }

                            // Now update the title attribute of the button.
                            $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));
                        },

                        /**
                         * Get all selected options.
                         *
                         * @returns {jQUery}
                         */
                        getSelected: function() {
                            return $('option', this.$select).filter(":selected");
                        },

                        /**
                         * Gets a select option by its value.
                         *
                         * @param {String} value
                         * @returns {jQuery}
                         */
                        getOptionByValue: function(value) {

                            var options = $('option', this.$select);
                            var valueToCompare = value.toString();

                            for (var i = 0; i < options.length; i = i + 1) {
                                var option = options[i];
                                if (option.value === valueToCompare) {
                                    return $(option);
                                }
                            }
                        },

                        /**
                         * Get the input (radio/checkbox) by its value.
                         *
                         * @param {String} value
                         * @returns {jQuery}
                         */
                        getInputByValue: function(value) {

                            var checkboxes = $('li input:not(.multiselect-search)', this.$ul);
                            var valueToCompare = value.toString();

                            for (var i = 0; i < checkboxes.length; i = i + 1) {
                                var checkbox = checkboxes[i];
                                if (checkbox.value === valueToCompare) {
                                    return $(checkbox);
                                }
                            }
                        },

                        /**
                         * Used for knockout integration.
                         */
                        updateOriginalOptions: function() {
                            this.originalOptions = this.$select.clone()[0].options;
                        },

                        asyncFunction: function(callback, timeout, self) {
                            var args = Array.prototype.slice.call(arguments, 3);
                            return setTimeout(function() {
                                callback.apply(self || window, args);
                            }, timeout);
                        },

                        setAllSelectedText: function(allSelectedText) {
                            this.options.allSelectedText = allSelectedText;
                            this.updateButtonText();
                        }
                    };

                    $.fn.multiselect = function(option, parameter, extraOptions) {
                        return this.each(function() {
                            var data = $(this).data('multiselect');
                            var options = typeof option === 'object' && option;

                            // Initialize the multiselect.
                            if (!data) {
                                data = new Multiselect(this, options);
                                $(this).data('multiselect', data);
                            }

                            // Call multiselect method.
                            if (typeof option === 'string') {
                                data[option](parameter, extraOptions);

                                if (option === 'destroy') {
                                    $(this).data('multiselect', false);
                                }
                            }
                        });
                    };

                    $.fn.multiselect.Constructor = Multiselect;

                    $(function() {
                        $("select[data-role=multiselect]").multiselect();
                    });

                }(window.jQuery);
            </script>
</body>

</html>